package net.devmanuals.model;

// Generated Aug 31, 2013 2:18:56 PM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.UUID;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.springframework.security.crypto.encrypt.Encryptors;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.security.crypto.password.StandardPasswordEncoder;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users")
public class Users implements java.io.Serializable {

	private Integer userId;
	private String username;
	private String password;
	@Enumerated(value = EnumType.ORDINAL)
	private PasswordType passwordType;
	private String firstName;
	private String lastName;
	private String email;
	private Date lastLogin;
	private Date createdAt;
	private Date modifiedAt;

	@Column(name = "salt")
	private String salt = UUID.randomUUID().toString();

	public String getSalt() {
		return salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}

	private Set<Statement> statements = new LinkedHashSet<Statement>(0);
	private final static String globalSalt = "c6241e1015499102";

	public static enum PasswordType {
		HASH, ENCRYPTED;
	}

	public static enum UserStatus {
		ACTIVE, DISABLED, DELETED, EXPIRED, UNCONFIRMED_EMAIL;
	}

	public Users() {
	}

	public Users(String username, String password, PasswordType passwordType, String firstName,
			String lastName, String email, Date lastLogin, Date createdAt, Date modifiedAt,
			String salt) {
		this.username = username;
		this.password = password;
		this.passwordType = passwordType;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.lastLogin = lastLogin;
		this.createdAt = createdAt;
		this.modifiedAt = modifiedAt;
		this.salt = salt;
	}

	public Users(String username, String password, PasswordType passwordType, String firstName,
			String lastName, String email, Date lastLogin, Date createdAt, Date modifiedAt,
			String salt, Set<Statement> statements) {
		this.username = username;
		this.password = password;
		this.passwordType = passwordType;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.lastLogin = lastLogin;
		this.createdAt = createdAt;
		this.modifiedAt = modifiedAt;
		this.salt = salt;
		this.statements = statements;
	}

	@Id
	@GeneratedValue
	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@Column(name = "username", nullable = false, length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 100)
	public String getPassword() {
		return this.password;
	}

	@Column(name = "password_type", nullable = false)
	public PasswordType getPasswordType() {
		return this.passwordType;
	}

	public void setPasswordType(PasswordType passwordType) {
		this.passwordType = passwordType;
	}

	@Column(name = "first_name", nullable = false, length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false, length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "email", nullable = false, length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_login", nullable = false, length = 19)
	public Date getLastLogin() {
		return this.lastLogin;
	}

	public void setLastLogin(Date lastLogin) {
		this.lastLogin = lastLogin;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "modified_at", nullable = false, length = 19)
	public Date getModifiedAt() {
		return this.modifiedAt;
	}

	public void setModifiedAt(Date modifiedAt) {
		this.modifiedAt = modifiedAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Statement> getStatements() {
		return this.statements;
	}

	public void setStatements(Set<Statement> statements) {
		this.statements = statements;
	}

	/**
	 * Helper method to verify if the password is the correct one
	 * 
	 * @param plainPassword
	 * @return
	 */
	public final boolean verifyPassword(String plainPassword) {
		if (this.passwordType == PasswordType.HASH) {
			StandardPasswordEncoder encoder = new StandardPasswordEncoder(this.salt);
			return encoder.matches(plainPassword, this.password);
		} else if (this.passwordType == PasswordType.ENCRYPTED) {
			TextEncryptor encoder = Encryptors.queryableText(this.salt.trim(), globalSalt.trim());
			String decryptedPassword = encoder.decrypt(this.password.trim());
			return decryptedPassword.equals(plainPassword.trim());
		} else {
			throw new RuntimeException("Unknown password type for user: " + this.userId);
		}
	}

	/**
	 * Retrieve the password for a student. If the user is not a student, this
	 * method will throws a runtime exception as those are stored as one-way
	 * hash.
	 * 
	 * @return
	 */
	/*
	 * public final String getDecryptedPassword() { if (this.passwordType ==
	 * PasswordType.HASH) { throw new
	 * RuntimeException("Unable to decrypt a hashed password, user id: " +
	 * this.userId); } else { TextEncryptor encoder =
	 * Encryptors.queryableText(this.salt, globalSalt); String decryptedPassword
	 * = encoder.decrypt(this.password); return decryptedPassword; } }
	 */
	/**
	 * Setting for password and bash on password type it will use a hash or an
	 * two-way encryption schema to store the password.
	 * 
	 * @param plainPassword
	 */
	public final void setPasswordHash(String plainPassword) {
		if (this.passwordType == PasswordType.HASH) {
			StandardPasswordEncoder encoder = new StandardPasswordEncoder(this.salt.trim());
			this.password = encoder.encode(plainPassword.trim());
		} else if (this.passwordType == PasswordType.ENCRYPTED) {
			TextEncryptor encoder = Encryptors.queryableText(this.salt.trim(), globalSalt.trim());
			this.password = encoder.encrypt(plainPassword.trim());
		}
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public final String decryptedPassword() {
		if (this.passwordType == PasswordType.HASH) {
			throw new RuntimeException("Unable to decrypt a hashed password, user id: "
					+ this.userId);
		} else {

			TextEncryptor encoder = Encryptors.queryableText(this.salt.trim(), globalSalt.trim());
			String decryptedPassword = encoder.decrypt(this.password.trim());
			return decryptedPassword;
		}
	}
}
